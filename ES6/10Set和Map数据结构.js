//=============================================================
//ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。Set 本身是一个构造函数，用来生成 Set 数据结构。
const s = new Set();
[2, 3, 4, 5, 3, 4, 1, 32, 3].forEach(x => s.add(x));
console.log(s);
const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
console.log(items.size);
//=============================================================
// 去除数组的重复成员
let arr = [3, 5, 2, 2, 5, 5];
let unique = [...new Set(arr)];
console.log(unique);
//=============================================================
console.log('======================keys,values,entries===============');
let set = new Set(['red','green','blue']);
for (let item of set.keys()) {
	console.log(item);
}
for (let item of set.values()) {
	console.log(item);
}
for (let item of set.entries()) {
	console.log(item);
}
//=============================================================
console.log(Set.prototype[Symbol.iterator] === Set.prototype.values)
//=============================================================
//并集、交集、差集
console.log('======================union,intersect,difference===============');
let a = new Set([1,2,3]);
let b = new Set([4,3,2]);
let union = new Set([...a,...b]);
console.log(union);
let intersect = [...a].filter(x => b.has(x));
console.log(intersect);
let difference = [...a].filter(x => !b.has(x));
console.log(difference);
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================
//=============================================================